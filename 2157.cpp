#include <iostream>#include <cstdio>#include <cstring>#include <cstdlib>#include <string>#include <cmath>#include <vector>#include <map>#include <algorithm>#define MOD 1000using namespace std;class Matrix {    private:        int n;        int a[32][32];    public:        Matrix() {}        void setI(int size) {            n = size;            memset(a, 0, sizeof(a));            for (int i = 0; i < n; ++ i)                a[i][i] = 1;        }        void readin(int size) {            n = size;            int m, s, t;            scanf("%d", &m);            memset(a, 0, sizeof(a));            while (m --) {                scanf("%d%d", &s, &t);                a[s][t] = 1;            }        }        friend Matrix operator *(const Matrix &a1, const Matrix &a2) {            Matrix a3;            a3.n = a1.n;            for (int i = 0; i < a1.n; ++ i)                for (int j = 0; j < a1.n; ++ j) {                    a3.a[i][j] = 0;                    for (int k = 0; k < a1.n; ++ k)                        a3.a[i][j] = (a3.a[i][j] + a1.a[i][k] * a2.a[k][j]) % MOD;                }            return a3;        }        int get(int x, int y) {            return a[x][y];        }};Matrix A[32];int ts;int T, a, b, k;int xx;int main() {        while (scanf("%d", &ts) == 1) {        if (ts == 0) break;        A[0].setI(ts);        A[1].readin(ts);        for (int i = 2; i <= 20; ++ i)            A[i] = A[i-1] * A[1];        scanf("%d", &T);        for (int i = 0; i < T; ++ i) {            scanf("%d%d%d", &a, &b, &k);            printf("%d\n", A[k].get(a, b));        }    }    return 0;}